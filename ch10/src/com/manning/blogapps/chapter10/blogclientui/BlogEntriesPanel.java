/*
 * Copyright 2005-2006, Dave Johnson
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.manning.blogapps.chapter10.blogclientui;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import com.manning.blogapps.chapter10.blogclient.BlogEntry;
import com.manning.blogapps.chapter10.blogclient.Blog;

/**
 * Panel with table that lists recent blog entries.
 * @author David M Johnson
 */
public class BlogEntriesPanel extends javax.swing.JPanel implements BlogClientTab {

	private Blog blog = null;
    private BlogClientFrame blogClientFrame = null;
    public static final int TITLE_COLUMN = 0;
    public static final int DATE_COLUMN = 1;
    public static final int ID_COLUMN = 2;
    public static final int COLUMN_COUNT = 3;
    
    /** Creates new form BlogEntriesPanel */
    public BlogEntriesPanel()
    {
        initComponents();
        mBlogEntries.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int row = mBlogEntries.rowAtPoint(e.getPoint());
                    TableModel model = mBlogEntries.getModel();
                    String id = (String)model.getValueAt(row, ID_COLUMN);
                    blogClientFrame.loadEntry(id);
                }
            }
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mScrollPane = new javax.swing.JScrollPane();
        mBlogEntries = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10)));
        mScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        mScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        mBlogEntries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        mScrollPane.setViewportView(mBlogEntries);

        add(mScrollPane, java.awt.BorderLayout.NORTH);

    }
    // </editor-fold>//GEN-END:initComponents
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable mBlogEntries;
    private javax.swing.JScrollPane mScrollPane;
    // End of variables declaration//GEN-END:variables


    /** Inject BlogClientFrame dependency. */
    public void setBlogClientFrame(BlogClientFrame blogClientFrame) {
        this.blogClientFrame = blogClientFrame;
    }    
    
    /** Inject BlogSite dependency. */
    public void setBlog(Blog blogSite) {
        this.blog = blogSite;
        reset();
    }    
    
    /** Update table of blog entries. */
    public void onSelected() {
        reset();
    }
    
    public void reset() {
        AbstractTableModel model = new BlogEntriesTableModel(blog); 
        mBlogEntries.setModel(model);
        model.fireTableDataChanged();
    }
}

/** Simple table model of recent blog entries */
class BlogEntriesTableModel extends DefaultTableModel {
    private int MAX_ENTRIES = 50;
    private Blog blogSite = null;
    private List entries = new ArrayList();
    
    public BlogEntriesTableModel(Blog blogSite) {
        this.blogSite = blogSite;
        try {
            int count = 0;
            Iterator entryIter = blogSite.getEntries();
            while (entryIter.hasNext() && count++ < 50) {
                BlogEntry entry = (BlogEntry)entryIter.next();
                entries.add(entry);
            }
        } 
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public Object getValueAt(int row, int col) {
        if (entries != null) {
            BlogEntry entry = (BlogEntry)entries.get(row);
            switch (col) {
                case BlogEntriesPanel.TITLE_COLUMN: { return entry.getTitle(); }
                case BlogEntriesPanel.DATE_COLUMN: { return entry.getModificationDate(); }
                case BlogEntriesPanel.ID_COLUMN: { return entry.getToken(); }
            }
        }
        return "ERROR";
    }  
    
    public int getColumnCount() {
        return BlogEntriesPanel.COLUMN_COUNT;
    }
    
    public int getRowCount() {
        return (entries != null) ? entries.size() : 0;
    }
    
    public String getColumnName(int column) {
        switch (column) {
           case BlogEntriesPanel.TITLE_COLUMN: return "Title";
           case BlogEntriesPanel.ID_COLUMN: return "Token";
           case BlogEntriesPanel.DATE_COLUMN: return "Date";
        }
        return "ERROR: Invalid column index";
    }
    
    public boolean isCellEditable(int row, int col) {
        return false;
    }
    
}


